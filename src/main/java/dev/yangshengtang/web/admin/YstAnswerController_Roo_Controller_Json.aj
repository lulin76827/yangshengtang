// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package dev.yangshengtang.web.admin;

import dev.yangshengtang.domain.YstAnswer;
import dev.yangshengtang.domain.YstQuestion;
import dev.yangshengtang.domain.YstUser;
import dev.yangshengtang.web.admin.YstAnswerController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect YstAnswerController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> YstAnswerController.showJson(@PathVariable("id") Integer id) {
        YstAnswer ystAnswer = ystAnswerService.findYstAnswer(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ystAnswer == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ystAnswer.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> YstAnswerController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<YstAnswer> result = ystAnswerService.findAllYstAnswers();
        return new ResponseEntity<String>(YstAnswer.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> YstAnswerController.createFromJson(@RequestBody String json) {
        YstAnswer ystAnswer = YstAnswer.fromJsonToYstAnswer(json);
        ystAnswerService.saveYstAnswer(ystAnswer);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> YstAnswerController.createFromJsonArray(@RequestBody String json) {
        for (YstAnswer ystAnswer: YstAnswer.fromJsonArrayToYstAnswers(json)) {
            ystAnswerService.saveYstAnswer(ystAnswer);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> YstAnswerController.updateFromJson(@RequestBody String json, @PathVariable("id") Integer id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        YstAnswer ystAnswer = YstAnswer.fromJsonToYstAnswer(json);
        if (ystAnswerService.updateYstAnswer(ystAnswer) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> YstAnswerController.deleteFromJson(@PathVariable("id") Integer id) {
        YstAnswer ystAnswer = ystAnswerService.findYstAnswer(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ystAnswer == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ystAnswerService.deleteYstAnswer(ystAnswer);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByQuestion", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> YstAnswerController.jsonFindYstAnswersByQuestion(@RequestParam("question") YstQuestion question) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(YstAnswer.toJsonArray(YstAnswer.findYstAnswersByQuestion(question).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByUser", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> YstAnswerController.jsonFindYstAnswersByUser(@RequestParam("user") YstUser user) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(YstAnswer.toJsonArray(YstAnswer.findYstAnswersByUser(user).getResultList()), headers, HttpStatus.OK);
    }
    
}
